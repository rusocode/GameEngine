#version 400 core // Version de GLSL

in vec3 position; // La entrada sera la posicion de los vertices que obtenemos del VAO
in vec2 textureCoords;

out vec2 pass_textureCoords;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 transformationMatrix;

// Metodo principal que se ejecutara cada vez que este sombreador de vertices procese un vertice
void main(void) {

    // Le dice a OpenGL donde representar este vertice en la pantalla
    gl_Position = projectionMatrix * viewMatrix * transformationMatrix * vec4(position, 1.0);
    pass_textureCoords = textureCoords;

}

/* Para resumir, tenemos nuestro cuadrado de 6 lados con sus cuatro vertices almacenados en una matriz de atributos en
 * un VAO: V1 (-0.5, 0.5, -0.5), V1 (-0.5, -0.5, -0.5), V2 (0.5, -0.5, -0.5) y V3 (0.5, 0.5, -0.5). El sombreador de
 * vertices que acabamos de programar tiene acceso a estas posiciones desde: in vec4 position. Para que el sombreador de
 * vertices se ejecute para cada vertice y use esta posicion de entrada primero debe decirle a la GPU en que parte de la
 * pantalla se debe representar el vertice. Esto se hace estableciendo la variable de posicion gl_Position = vec4(position, 1.0).
 * Luego el sombreador de vertices calcula el color para cada vertice basado en la posicion de ese vertice usando las
 * coordenadas de texturas. */