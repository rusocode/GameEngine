-Player movement
Imaginemos por un segundo que estamos mirando la escena desde arriba (ver player desde arriba.png). Aqui esta nuestro jugador y esta mirando en esta direccion. Ya hemos
calculado que tan lejos viajara en este fotograma (dis) y conocemos la rotacion del jugador en el eje y (getAngle().y), pero ahora solo necesitamos averiguar cual
sera la proxima posicion del jugador despues de moverse esa distancia en esa direccion. Para hacerlo necesitamos averiguar que tan lejos debe moverse el jugador a lo 
largo del eje x (dx) y a lo largo del eje z (dz). Luego podemos simplemente agregar la traslacion [x] y [z] a la posicion actual [x] y [z] del player y tendremos la nueva 
posicion del player. Asi que basicamente lo que tenemos aqui es un triangulo rectangulo donde la posicion actual del player esta en la parte inferior izquierda y la 
siguiente posicion del player esta en la parte superior derecha (ver siguiente posicion.png). Sabemos que el lado mas largo del triangulo, la hipotenusa, tiene una 
distancia de longitud d y que el angulo en la esquina inferior izquierda es la rotacion [y] del player. Lo que ahora necesitamos calcular es hasta que punto necesita
moverse el player en la direccion [x] y que tan lejos debe moverse el player en la direccion [z]. Los conceptos basicos de trigonometria nos diran que el seno de 
theta: sin(0) = x/d, donde theta es la rotacion [y], es igual a x/d y el coseno de theta: cos(0) = z/d, es igual a z/d. Si reorganizamos estas ecuaciones multiplicando
ambos lados por d, entonces tenemos un par de ecuaciones que nos muestran como calcular el movimiento [x] y [z] del player (ver ecuacion.png). Es importante convertir
los grados en radianes para poder cacular la ecuacion.
https://www.mathsisfun.com/algebra/trigonometry.html
https://www.youtube.com/watch?v=F21S9Wpi0y8

-3rd Person Camera
Antes de comenzar, solo hay un par de conceptos matematicos muy simples que hay que saber. El primer concepto es muy simple, si tiene dos lineas que se cruzan, entonces
este angulo aqui siempre sera el mismo que este angulo de aqui y lo mismo con los otros dos angulos (ver primer concepto.png). Para el segundo concepto, si tiene
dos lineas paralelas y otra linea que las cruza a ambas, entonces este angulo es el mismo que este angulo como antes, pero tambien son iguales a este angulo y a este otro,
porque estas dos lineas son paralelas y, por supuesto, eso significa que estos otros angulos son todos iguales entre si (ver segundo concepto.png). El siguiente concepto
son los conceptos basicos de trigonometria. Asi que si tenemos un triangulo rectangulo con un angulo theta (0) y el lado mas largo del triangulo, la hipotenusa con una
longitud h, entonces el seno de theta es igual a la longitud del lado opuesto (a) al angulo dividido por h y el coseno de theta es igual al lado adyacente (b) dividido
por h. Y al multiplicar ambos lados de estas ecuaciones por h, tenemos estas dos ecuaciones para encontrar las longitudes de los lados a y b. Por lo que la longitud
del lado opuesto al angulo siempre sera igual a la hipotenusa multiplicada por el seno de theta y la longitud del lado adyacente al angulo siempre sera igual a la longitud
de la hipotenusa multiplicada por el coseno de theta (ver tercer concepto.png).
Ahora podemos empezar con la camara, por lo que la camara en tercera persona que vamos a crear siempre seguira al jugador de esta manera (tercera persona) y siempre
apuntara directamente al jugador este donde este. Programaremos eso para que lo haga automaticamente, pero tambien hay tres cosas que el usuario puede controlar acerca de la camara: en primer lugar, podra acercar y alejar la camara cuando lo desee. Esto se hace simplemente alterando la distancia entre la camara y el player, para que en cualquier momento, sim importar donde este la camara, el usuario siempre pueda controlar esta distancia y vamos a programarlo para que al desplazar la rueda del mouse controle esta distancia (ver zoom.png). Tambien, el usuario podra controlar que tan alto o bajo esta la camara manteniendo apretado el click izquierdo y moviendo el mouse verticalmente. Si echamos un vistazo a lo que sucede desde el costado, basicamente estamos alterando este angulo de aqui (ver side wiev.png), es decir, el angulo en el eje [x], que mueve la camara hacia arriba y abajo. Finalmente el usuario tambien puede mover la camara alrededor del player para que pueda ver al jugador desde diferentes angulos (ver top view.png) en el eje [y]. Este movimiento se controla manteniendo apretado el click izquierdo y moviendo el mouse horizontalmente. La variable xAngle es la que determina que tan alto o bajo esta la camara, como puede ver aqui (ver pitch.png), siempre sera exactamente el mismo angulo que el pitch.
Ahora que tenemos todas estas variables (zoom, xAngle y yAngle) y todas pueden ser controladas por la entrada del usuario, tenemos toda la informacion necesaria para calcular cual debe ser la posicion y rotacion de la camara. Para ayudarnos a hacer esto, primero vamos a calcular dos distancias, la distania vertical de la camara desde el player y la distancia horizontal de la camara desde el player. Asi que ahora conocemos la distancia desde el player (zoom) porque esta controlada por el usuario y conocemos el angulo xAngle (ex pitch) porque tambien lo controla el usuario, por lo que usando la trigonometria que vimos anteriormente, podemos calcular muy facilmente
la distancia horizontal y vertical de la camara desde el player (ver posicion de la camara ecuacion.png). 
Ahora echemos otro vistazo a lo que sucede desde arriba de la escena. Lo utlimo que debemos calcular para obtener la posicion de la camara es su desplazamiento en x (offsetX) e y (offsetY) del player. Si conocemos estas distancias, entonces podemos calcular la posicion [x] y [z] de la camara. Pero primero quiero senialar los ejes en la esquina superior izquierda y observar como el eje [z] apunta hacia abajo (ver eje z hacia abajo.png). Si imaginas el eje normalmente tienes el eje [x] apuntando hacia la derecha, el eje [y] apuntando hacia arriba y el eje [z] apuntando hacia nosotros (ver imaganinando el eje normalmente.png). Asi que si te imaginas mirando eso desde arriba se veria asi (ver eje desde arriba.png) con el eje [y] apuntando directamente fuera de la pantalla hacia ti. Por eso el eje [z] apunta hacia abajo cuando miramos la escena desde arriba. Asi tenemos a nuestro player mirando en una direccion determinada que esta determinada por la rotacion [y] del player (getAngle().y) y queremos que la camara
siga al player por detras, por lo que la camara estara en algun lugar por detras y conocemos esta distancia porque la acabamos de calcular, es la distancia horizontal de la camara desde el player, la cual marcare con una h. Tambien sabemos que este angulo de aqui es lo mismo que este angulo de aqui debido al primer concepto matematico que vimos antes, por lo que este angulo tambien debe ser igual a la rotacion [y] del player (ver primer concepto aplicado a la escena desde arriba.png). Pero no olvidemos que la camara no siempre tiene que estar directamente detras del jugador, el usuario puede mover la camara alrededor del player alterando el angulo alrededor de la variable del player (yAngle) (ver angulo y del player alterado por el movimiento de la camara.png). Entonces al angulo del player se le suma el angulo de inclinacion de la camara, y simplemente llamare a este angulo total theta (ver angulo total.png). Y ahora tenemos todo lo que necesitamos para calcular los offsets [x] y [z] de la camara desde el player. Una vez mas tenemos un triangulo rectangulo, por lo que la longitud del lado opuesto al angulo es: x offset = h x sin(0) y la longitud del lado adyacente al angulo theta es, como siempre, la longitud de la hipotenusa o h multiplicado por el coseno de theta. Y no olvidemos que theta era igual a la rotacion y del player mas el angulo de la camara alrededor del player, y h representa la distancia horizontal de la camara desde el player (ver tercer concepto aplicado a la escena desde arriba.png).
Una vez calculados los offsets, Â¿por que restamos los offsets de la posicion del player en lugar de sumarlos? Si miras bien aqui, el offset x de la camara DESDE la posicion del player esta en la direccion negativa y el offset z de la camara DESDE el player tambien esta en la direccion negativa (ver restando los offsets de la posicion del player.png).
Ahora si rotamos la camara alrededor del player veras que la camara no mira en la direccion correcta, siempre mira hacia adelante y eso se debe a que nunca cambiamos el valor yaw. Asi que echemos un vistazo a como podemos calcular la camara segun su yaw. La forma en que lo tenemos configurado es este angulo aqui (ver angulo yaw.png). Asi que sabemos que este angulo de aqui es el angulo de la camara alrededor del player. Y este angulo es la rotacion [y] del player, por lo que este angulo tambien es igual
a la rotacion [y] del player (ver angulos con respecto al yaw.png), lo que significa que este angulo total (theta) es igual a la rotacion de [y] mas el angulo alrededor del player, nada que no hayamos hecho ya. Entonces, usando lo que sabemos sobre angulos en lineas paralelas, sabemos que este angulo aqui tambien debe ser igual a theta (ver segundo concepto aplicado a la escena desde arriba.png). Por lo que el angulo yaw es igual a todo este angulo, que obviamente es 180 grados menos theta, por lo que yaw es igual a 180 grados menos theta (ver yaw menos theta.png).