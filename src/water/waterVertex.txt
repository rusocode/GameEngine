#version 400 core

in vec2 position;

out vec4 clipSpace;
out vec2 textureCoords;
out vec3 toCameraVector;

uniform mat4 projectionMatrix, viewMatrix, modelMatrix;
uniform vec3 cameraPosition;

// Valor para colocar en mosaicos las coordendas de textura
const float tiling = 6.0;

/* El efecto fresnel (fresnel effect) describe como cambia la reflectividad del agua dependiendo del angulo de vision
 * para que el agua parezca mas transparente cuando se mira desde arriba, pero mas reflectante cuando se mira desde un
 * angulo bajo. Por ejemplo, si tenemos una superficie de agua con la superficie normal apuntando hacia arriba y
 * necesitamos calcular que tan reflectante debe ser la superficie dependiendo de la posicion de la camara. Si la normal
 * del agua y el vector que va desde el agua a la camara apuntan en la misma direccion, el agua deberia ser mas
 * transparente. Cuando ambos vectores apuntan en diferentes direcciones, la superficie del agua deberia ser mas
 * reflectante. El producto escalar de las aguas normales y el vector que apunta a la camara representa que tan
 * transparente debe ser el agua. */

void main(void) {

    vec4 worldPosition = modelMatrix * vec4(position.x, 0.0, position.y, 1.0);
    // Genera las coordenadas del espacio de recorte de este vertice
    clipSpace =  projectionMatrix * viewMatrix * worldPosition;
	gl_Position = clipSpace;
	textureCoords = vec2(position.x / 2.0 + 0.5, position.y / 2.0 + 0.5) * tiling;
	// Calcula el vector que apunta hacia la camara restando la posicion de esta y la posicion del modelo
	toCameraVector = cameraPosition - worldPosition.xyz;

}